#!/usr/bin/env python

from __future__ import print_function

import sys
import inspect
import subprocess

def main():
    if len(sys.argv) < 2:
        sys.exit(1)

    listing = True

    module = None
    element = None

    less = subprocess.Popen(['/usr/bin/less', '-'], stdin=subprocess.PIPE)

    parts = sys.argv[1].split('.')
    for i in range(len(parts), 0, -1):
        try:
            #print 'Importing: %s' % '.'.join(parts[:i])
            module = __import__('.'.join(parts[:i]), fromlist=parts[i:])
        except:
            #print 'Fail'
            pass
        else:
            #print 'Success! %s' % element
            if i == len(parts):
                element = module
            else:
                element = eval('module.%s' % '.'.join(parts[i:]))
            #print 'Element: %s' % element
            break

    if element:
        element_type = type(element).__name__
        if element_type == 'type': element_type = 'class'
        less.stdin.write('%s\n\n' % (sys.argv[1].upper(),))
        less.stdin.write('\033[1m%s\033[0m\n' % element_type.upper())
        try:
            args, varargs, varkw, defaults = inspect.getargspec(element)
            less.stdin.write(indent('\033[1m%s\033[0m%s\n' %
                                    (element.__name__,
                                     inspect.formatargspec(
                                        args, varargs, varkw, defaults))))
        except:
            less.stdin.write(indent(element.__name__) + '\n')
        less.stdin.write('\n')
        less.stdin.write('\033[1mDOCUMENTATION\033[0m\n')
        less.stdin.write(indent(trim(inspect.getdoc(element))) + '\n')
        less.stdin.write('\n')
    else:
        try:
            element = eval(parts[0])
            less.stdin.write('\033[1mELEMENT\033[0m\n')
            less.stdin.write(indent(parts[0]) + '\n')
            less.stdin.write('\n')
            less.stdin.write('\033[1mDOCUMENTATION\033[0m\n')
            less.stdin.write(indent(trim(inspect.getdoc(element))) + '\n')
        except:
            less.stdin.write('Module not found: %s' % '.'.join(parts) + '\n')
        less.stdin.write('\n')
        less.stdin.close()
        less.wait()
        return

    if listing:
        less.stdin.write('\033[1mMEMBER LIST\033[0m\n')
        for item in sorted(dir(element or module)):
            if not item.startswith('_'):
                less.stdin.write(indent(item) + '\n')
        less.stdin.write('\033[0m\n')
    less.stdin.close()
    less.wait()


def indent(text):
    return '       ' + text.replace('\n', '\n       ').rstrip(' ')


def trim(docstring):
    if not docstring:
        return ''
    # Convert tabs to spaces (following the normal Python rules)
    # and split into a list of lines:
    lines = docstring.expandtabs().splitlines()
    # Determine minimum indentation (first line doesn't count):
    indent = sys.maxint
    for line in lines[1:]:
        stripped = line.lstrip()
        if stripped:
            indent = min(indent, len(line) - len(stripped))
    # Remove indentation (first line is special):
    trimmed = [lines[0].strip()]
    if indent < sys.maxint:
        for line in lines[1:]:
            trimmed.append(line[indent:].rstrip())
    # Strip off trailing and leading blank lines:
    while trimmed and not trimmed[-1]:
        trimmed.pop()
    while trimmed and not trimmed[0]:
        trimmed.pop(0)
    # Return a single string:
    return '\n'.join(trimmed)


if __name__ == '__main__':
    main()

